// <auto-generated />
using ExamSystem.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExamSystem.Migrations
{
    [DbContext(typeof(ExamDBContext))]
    [Migration("20250715105919_InitialBaseline")]
    partial class InitialBaseline
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ExamSystem.Models.Answer", b =>
                {
                    b.Property<int>("Ans_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Ans_ID"));

                    b.Property<int?>("MCQ_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Selected")
                        .HasColumnType("int");

                    b.Property<int?>("StudentExam_ID")
                        .HasColumnType("int");

                    b.Property<int?>("TrueFalse_ID")
                        .HasColumnType("int");

                    b.HasKey("Ans_ID");

                    b.HasIndex("MCQ_ID");

                    b.HasIndex("StudentExam_ID");

                    b.HasIndex("TrueFalse_ID");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("ExamSystem.Models.Exam", b =>
                {
                    b.Property<int>("Exam_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Exam_ID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Exam_ID");

                    b.ToTable("Exam");
                });

            modelBuilder.Entity("ExamSystem.Models.MCQQuestion", b =>
                {
                    b.Property<int>("MCQ_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MCQ_ID"));

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CorrectAnswer")
                        .HasColumnType("int");

                    b.Property<int?>("Exam_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Mark")
                        .HasColumnType("int");

                    b.Property<string>("Option1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option4")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MCQ_ID");

                    b.HasIndex("Exam_ID");

                    b.ToTable("MCQQuestion");
                });

            modelBuilder.Entity("ExamSystem.Models.Result", b =>
                {
                    b.Property<int>("Result_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Result_ID"));

                    b.Property<int?>("Exam_ID")
                        .HasColumnType("int");

                    b.Property<double?>("Score")
                        .HasColumnType("float");

                    b.Property<int?>("User_ID")
                        .HasColumnType("int");

                    b.HasKey("Result_ID")
                        .HasName("PK_Table_1");

                    b.HasIndex("Exam_ID");

                    b.HasIndex("User_ID");

                    b.ToTable("Result");
                });

            modelBuilder.Entity("ExamSystem.Models.StudentExam", b =>
                {
                    b.Property<int>("StudentExam_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentExam_ID"));

                    b.Property<int?>("Exam_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Student_ID")
                        .HasColumnType("int");

                    b.Property<string>("isSubmitted")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("StudentExam_ID");

                    b.HasIndex("Exam_ID");

                    b.HasIndex("Student_ID");

                    b.ToTable("StudentExam");
                });

            modelBuilder.Entity("ExamSystem.Models.TrueFalseQuestion", b =>
                {
                    b.Property<int>("TrueFalse_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrueFalse_ID"));

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CorrectAnswer")
                        .HasColumnType("int");

                    b.Property<int?>("Exam_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Mark")
                        .HasColumnType("int");

                    b.Property<string>("Option1")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("Option2")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.HasKey("TrueFalse_ID");

                    b.HasIndex("Exam_ID");

                    b.ToTable("TrueFalseQuestion");
                });

            modelBuilder.Entity("ExamSystem.Models.User", b =>
                {
                    b.Property<int>("User_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("User_ID"));

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Role")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("User_ID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ExamSystem.Models.Answer", b =>
                {
                    b.HasOne("ExamSystem.Models.MCQQuestion", "MCQ")
                        .WithMany("Answers")
                        .HasForeignKey("MCQ_ID")
                        .HasConstraintName("FK_Answers_MCQQuestion1");

                    b.HasOne("ExamSystem.Models.StudentExam", "StudentExam")
                        .WithMany("Answers")
                        .HasForeignKey("StudentExam_ID")
                        .HasConstraintName("FK_Answers_StudentExam");

                    b.HasOne("ExamSystem.Models.TrueFalseQuestion", "TrueFalse")
                        .WithMany("Answers")
                        .HasForeignKey("TrueFalse_ID")
                        .HasConstraintName("FK_Answers_TrueFalseQuestion1");

                    b.Navigation("MCQ");

                    b.Navigation("StudentExam");

                    b.Navigation("TrueFalse");
                });

            modelBuilder.Entity("ExamSystem.Models.MCQQuestion", b =>
                {
                    b.HasOne("ExamSystem.Models.Exam", "Exam")
                        .WithMany("MCQQuestions")
                        .HasForeignKey("Exam_ID")
                        .HasConstraintName("FK_MCQQuestion_Exam");

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("ExamSystem.Models.Result", b =>
                {
                    b.HasOne("ExamSystem.Models.Exam", "Exam")
                        .WithMany("Results")
                        .HasForeignKey("Exam_ID")
                        .HasConstraintName("FK_Result_Exam");

                    b.HasOne("ExamSystem.Models.User", "User")
                        .WithMany("Results")
                        .HasForeignKey("User_ID")
                        .HasConstraintName("FK_Result_User");

                    b.Navigation("Exam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExamSystem.Models.StudentExam", b =>
                {
                    b.HasOne("ExamSystem.Models.Exam", "Exam")
                        .WithMany("StudentExams")
                        .HasForeignKey("Exam_ID")
                        .HasConstraintName("FK_StudentExam_Exam");

                    b.HasOne("ExamSystem.Models.User", "Student")
                        .WithMany("StudentExams")
                        .HasForeignKey("Student_ID")
                        .HasConstraintName("FK_StudentExam_User");

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ExamSystem.Models.TrueFalseQuestion", b =>
                {
                    b.HasOne("ExamSystem.Models.Exam", "Exam")
                        .WithMany("TrueFalseQuestions")
                        .HasForeignKey("Exam_ID")
                        .HasConstraintName("FK_TrueFalseQuestion_Exam");

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("ExamSystem.Models.Exam", b =>
                {
                    b.Navigation("MCQQuestions");

                    b.Navigation("Results");

                    b.Navigation("StudentExams");

                    b.Navigation("TrueFalseQuestions");
                });

            modelBuilder.Entity("ExamSystem.Models.MCQQuestion", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("ExamSystem.Models.StudentExam", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("ExamSystem.Models.TrueFalseQuestion", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("ExamSystem.Models.User", b =>
                {
                    b.Navigation("Results");

                    b.Navigation("StudentExams");
                });
#pragma warning restore 612, 618
        }
    }
}
